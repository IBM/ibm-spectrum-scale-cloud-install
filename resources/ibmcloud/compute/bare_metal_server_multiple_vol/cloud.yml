#cloud-config
growpart:
  mode: off
  devices: ['/']
resize_rootfs: false
write_files:
  - content: |
      #!/bin/bash
      # This script encrypts the root partition of a Redhat 8/9 stock IBM Cloud
      # image using the TPM to encrypt the LUKS keys.  It assumes there is plenty
      # of unpartition space on the drive, and leaves the current root partition
      # for rescue boot (but this could be deleted on a subsequent boot).
      #
      # * Create a new partition on the drive using all free space
      # * Encrypt the new partition using LUKS with a known passphrase
      # * Use 'clevis' to create an additional LUKS passphrase that is bound to the TPM
      # * Re-generate initramfs via dracut to ensure the root drive is auto-unlocked on boot
      # * Copy the current root filesystem to the new drive
      # * Update fstab and crypttab for auto-mounting
      # * Update grub to boot using the newly encrypted root drive
      #
      echo "Encrypt my boot drive"
      # Determine the boot device (minus partition name)
      # Assumes 'sdaX' or 'nvmeXnYpZ'
      device=$(mount | grep "on / type" | awk '{print $1}')
      if [[ "$device" =~ "nvme" ]]; then
          device=${device%??}
      else
          device=${device%?}
      fi
      # Create a root partition filling up the rest of the drive
      echo -e "n\np\n\n\n\nw" | fdisk $device
      partition=$(fdisk -l $device | grep $device | tail -1 | awk '{print $1}')
      # Install packages (support rhel/centos)
      dnf install cryptsetup clevis clevis-luks clevis-dracut tpm2-tools -y
      # Setup encryption on the drive with a well known passphrase, and format the filesystem
      echo -n n0tsecret | cryptsetup luksFormat --type luks2 -q --force-password $partition
      echo -n n0tsecret | cryptsetup open $partition root
      mkfs.xfs /dev/mapper/root
      # Add the TPM key to the LUKS encrypted drive.
      # For additional security, you can bind it to specific TPM PCR banks, but this will cause the TPM unlock
      # to fail when the bank changes (EG firmware is updated).  If you want to bind it to a PCR:
      # ,"pcr_bank":"sha256","pcr_ids":"7"
      echo -n n0tsecret | clevis luks bind -y -k - -d $partition tpm2 '{"hash":"sha256","key":"rsa"}'
      # Regenerate dracut initramfs to allow unlock on boot
      dracut -fv --regenerate-all
      # Copy the OS into the encrypted partition
      mkdir /mnt/encryptedroot
      mount /dev/mapper/root /mnt/encryptedroot
      rsync -a --exclude='/proc/*' --exclude='/sys/*' --exclude='/boot' --exclude='/mnt/encryptedroot' / /mnt/encryptedroot
      # Grab the UUID for the encrypted partition and setup the crypttab
      uuid=$(lsblk -lfi -o NAME,FSTYPE,UUID | grep crypto_LUKS | awk '{print $3}')
      echo "root UUID=${uuid} none luks" > /mnt/encryptedroot/etc/crypttab
      # Replace root with '/dev/mapper/root / xfs defaults 0 1' in fstab
      sed -i "/\t\/\t/c/dev/mapper/root\t/\txfs\tdefaults\t0\t1" /mnt/encryptedroot/etc/fstab
      # Setup grub
      # Grab default cmdline args
      args=$(grep CMDLINE_LINUX /etc/default/grub)
      args=${args#GRUB_CMDLINE_LINUX=*}
      args=${args//\"/}
      # Update grub and set the new entry to be the default.
      grubby --add-kernel="/boot/vmlinuz-$(uname -r)" \
          --title="Boot from encrypted root" \
          --initrd="/boot/initramfs-$(uname -r).img" \
          --args "${args} root=/dev/mapper/root rd.luks.name=${uuid}=root" \
          --make-default
      # Since we use EFI, copy the grubenv over (note the \cp is not a typo,
      # it ensures that the 'cp' alias isn't used.)
      efidir=$(ls /boot/efi/EFI/ | grep -v BOOT)
      \cp -f /boot/grub2/grubenv /boot/efi/EFI/${efidir}/
      # We MUST have a separate /boot partiiton to host the kernel and initramfs unencrypted
      # as these are needed to unlock the root drive.  The IBM CLoud RHEL 9.x images have
      # a separate boot partiiton, but 8.x do not.
      # If we dont have a separate /boot partition, we'll use the current root partition
      # as /boot.  So copy the current /boot content into the root of the filessytem.
      if ! lsblk -l | grep /boot$; then
          rsync -a --exclude='/efi*' /boot/ /
          # Current root device UUID - it will become boot device uuid
          curr_root_uuid=$(lsblk -fl | grep /$ | awk '{print $4}')
          # Add the new /boot partition to fstab for auto-mounting.
          echo -e "UUID=${curr_root_uuid}\t/boot\txfs\tdefaults\t0\t0" >> /mnt/encryptedroot/etc/fstab
      fi
      # Reboot the system
      # shutdown -r now
    path: /usr/local/bin/boot_drive_encryption.sh
    permissions: '0755'
runcmd:
  - /usr/local/bin/boot_drive_encryption.sh
